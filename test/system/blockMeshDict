/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  12
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/* 
The mesh is a parallelepiped, or cylinder with square base, with the bases in the
x-z plane. It corresponds to the ranges of coordinates [-base/2, base/2], 
[-length/2,length/2], [-base/2, base/2]. The mesh is graded so that it is more 
refined close to y=0.
*/

convertToMeters 1; // every size is in meters.

// Constants. Change these to change the domain.
base 1.0;
length 5.0;
num_x_cells 20;
num_y_cells 100; // must be even.
num_z_cells 20;
grading 5.0; // a higher number means more grading.

// Derived constants.
half_base #calc "$base / 2";
negative_half_base #calc "- $half_base";
half_length #calc "$length / 2";
negative_half_length #calc "- $half_length";
half_y_cells #calc "$num_y_cells / 2";
inverse_grading #calc "1 / $grading";

vertices
(
    ($negative_half_base 0 $negative_half_base)                     // 0
    ($half_base 0 $negative_half_base)                              // 1
    ($half_base $half_length $negative_half_base)                   // 2
    ($negative_half_base $half_length $negative_half_base)          // 3
    ($negative_half_base 0 $half_base)                              // 4
    ($half_base 0 $half_base)                                       // 5
    ($half_base $half_length $half_base)                            // 6
    ($negative_half_base $half_length $half_base)                   // 7
    ($negative_half_base $negative_half_length $negative_half_base) // 8
    ($half_base $negative_half_length $negative_half_base)          // 9
    ($half_base $negative_half_length $half_base)                   // 10
    ($negative_half_base $negative_half_length $half_base)          // 11
);

blocks
(
    hex (0 1 2 3 4 5 6 7) ($num_x_cells $half_y_cells $num_z_cells) simpleGrading (1 $grading 1)
    hex (8 9 1 0 11 10 5 4) ($num_x_cells $half_y_cells $num_z_cells) simpleGrading (1 $inverse_grading 1)
);

boundary
(
    // x = -base/2
    periodicLeft
    {
        type cyclic;
        neighbourPatch  periodicRight; 
        faces
        (
            (0 3 4 7)
            (0 4 8 11)
        );
    }

    // x = base/2
    periodicRight
    {
        type cyclic;
        neighbourPatch  periodicLeft; 
        faces
        (
            (1 2 5 6)
            (1 5 9 10)
        );
    }

    // z = -base/2
    periodicBottom
    {
        type cyclic;
        neighbourPatch  periodicTop; 
        faces
        (
            (0 1 2 3)
            (0 1 8 9)
        );
    }

    // z = base/2
    periodicTop
    {
        type cyclic;
        neighbourPatch  periodicBottom; 
        faces
        (
            (4 5 6 7)
            (4 5 10 11)
        );
    }

    // y = length/2
    inlet
    {
        type wall;
        faces
        (
            (2 3 6 7)
        );
    }

    // y = -length/2
    outlet
    {
        type wall;
        faces
        (
            (8 9 10 11)
        );
    }
);


// ************************************************************************* //
